Name: E Ma
Email: eaabyma@gmail.com

01 Introduction to C# and Data Types 

PART 1 --------- Understanding Data Types | Test your Knowledge ---------------------------------------------

1. What type would you choose for the following “numbers”?

A person’s telephone number - string 
A person’s height - float or decimal
A person’s age - int
A person’s gender (Male, Female, Prefer Not To Answer) - string 
A person’s salary - float
A book’s ISBN - string
A book’s price - float or decimal 
A book’s shipping weight - float
A country’s population - long
The number of stars in the universe - Integer
The number of employees in each of the small or medium businesses in the 
United Kingdom (up to about 50,000 employees per business) - int

2. What are the difference between value type and reference type variables? 
There are many difference between them:
1. Values directly contain their data, references store references to their data (Known as objects). 
Value type will directly hold the value, while reference type will hold the memory address or reference for this value
2. Values each has its own copy of data, two reference variable can reference the same object.
3. Values operation on one can not effect another, reference operation on one can effect another.
4. Value types are stored in stack memory, while reference type will be stored in heap memory
5. Value types will not be collected by garbage collector, while reference type will be collected by garbage collector 
6. Value type can be created by Struct or Enum, while Reference type can be created by class, interface, delegate, or array
7. Value type cannot accept null value, but reference types can accept null values

What is boxing and unboxing?
Boxing is the process of converting a value type to the type object or to any interface type implemented by this value type. 
Unboxing is an explicit conversion from the type object to a value type or from an interface type to a value type that implements the interface. 
Convert a value type to a reference type - boxing
Convert a reference type to a value type - unboxing

3. What is meant by the terms managed resource and unmanaged resource in .NET 
Managed resources are those that are pure . NET code and managed by the runtime and are under its direct control. 
Unmanaged resources are those that run outside the . NET runtime (CLR)(aka non-. NET code.) 

4. Whats the purpose of Garbage Collector in .NET? 
. NET's garbage collector manages the allocation and release of memory for your application. 
Each time you create a new object, the common language runtime allocates memory for the object from the managed heap.

PART 2 --------- Playing with Console App ---------------------------------------------

Modify your console application to display a different message. Go ahead and
intentionally add some mistakes to your program, so you can see what kinds of error
messages you get from the compiler. The more familiar you are with these messages, and
what causes them, the better you'll be at diagnosing problems in your programs that you /
didn't/ intend to add!
Using just the ReadLine and WriteLine methods and your current knowledge of variables,
you can have the user pass in quite a few bits of information. Using this approach, create a
console application that asks the user a few questions and then generates some custom
output for them. 
For instance, your program could generate their "hacker name" by asking
them their favorite color, their astrology sign, and their street address number. The result
might be something like "Your hacker name is RedGemini480."

Answer: Please find hackerNameGenerator

Practice number sizes and ranges

1. Create a console application project named /02UnderstandingTypes/ that outputs the
number of bytes in memory that each of the following number types uses, and the
minimum and maximum values they can have: sbyte, byte, short, ushort, int, uint, long,
ulong, float, double, and decimal.
Composite Formatting to learn how to align text in a console application

Answer: Please find 02UnderstandingTypes 

Output: 
sbyte - Number of bytes in memory: 8 bits| Minimum value: -128| Maximum value: 127
byte - Number of bytes in memory: 8 bits| Minimum value: 0| Maximum value: 255
short - Number of bytes in memory: 16 bits| Minimum value: -32768| Maximum value: 32767
ushort - Number of bytes in memory: 16 bits| Minimum value: 0| Maximum value: 65535
int - Number of bytes in memory: 32 bits| Minimum value: -2147483648| Maximum value: 2147483647
uint - Number of bytes in memory: 32 bits| Minimum value: 0| Maximum value: 4294967295
long - Number of bytes in memory: 64 bits| Minimum value: -9223372036854775808| Maximum value: 9223372036854775807
ulong - Number of bytes in memory: 64 bits| Minimum value: 0| Maximum value: 18446744073709551615
float - Number of bytes in memory: 32 bits| Minimum value: -3.4028235E+38| Maximum value: 3.4028235E+38
double - Number of bytes in memory: 64 bits| Minimum value: -1.7976931348623157E+308| Maximum value: 1.7976931348623157E+308
decimal - Number of bytes in memory: 128 bits| Minimum value: -79228162514264337593543950335| Maximum value: 79228162514264337593543950335

2. Write program to enter an integer number of centuries and convert it to years, days, hours, 
minutes, seconds, milliseconds, microseconds, nanoseconds. Use an appropriate data
type for every data conversion. Beware of overflows!
Input: 1
Output: 1 centuries = 100 years = 36524 days = 876576 hours = 52594560 minutes
= 3155673600 seconds = 3155673600000 milliseconds = 3155673600000000
microseconds = 3155673600000000000 nanoseconds
Input: 5
Output: 5 centuries = 500 years = 182621 days = 4382904 hours = 262974240
minutes = 15778454400 seconds = 15778454400000 milliseconds = 15778454400000000
microseconds = 15778454400000000000 nanoseconds

Answer: Please find integerconvert  

PART 3 --------- Explore following topics ---------------------------------------------

C# Keywords
Main() and command-line arguments
Types (C# Programming Guide)
Statements, Expressions, and Operators
Strings (C# Programming Guide)
Nullable Types (C# Programming Guide)
Nullable reference types
Controlling Flow and Converting Types

PART 4 --------- Test your Knowledge ---------------------------------------------

1. What happens when you divide an int variable by 0?
We will get an exception: DivideByZeroException

System.DivideByZeroException: Attempted to divide by zero.
  at MyApplication.Program.Main (System.String[] args) [0x00018] in <4b85494b67fd44d2b7e39c47e3f704ee>:0 
[ERROR] FATAL UNHANDLED EXCEPTION: System.DivideByZeroException: Attempted to divide by zero.
  at MyApplication.Program.Main (System.String[] args) [0x00018] in <4b85494b67fd44d2b7e39c47e3f704ee>:0 

2. What happens when you divide a double variable by 0?
Infinity

3. What happens when you overflow an int variable, that is, set it to a value beyond its
range?
If your value is greater than the maximum int value, then your loop will run forever because of this.
the int wraps around from 2147483647 back to -2147483648 and the loop just keeps on going.

4. What is the difference between x = y++; and x = ++y;?
++y is called pre-increment uses the principle ‘change-then-use’
x++ is called post-increment uses the principle ‘use-then-change’

5. What is the difference between break, continue, and return when used inside a loop
statement?

Break, continue and return are jump statements.

The break statement is used to terminate the loop or statement in which it present. 
After that, the control will pass to the statements that present after the break statement, 
if available. If the break statement present in the nested loop, 
then it terminates only those loops which contains break statement. 

This continue statement is used to skip over the execution part of the loop on a certain condition. 
After that, it transfers the control to the beginning of the loop. 
Basically, it skips its following statements and continues with the next iteration of the loop.

This statement terminates the execution of the method and returns the control to the calling method. 
It returns an optional value. If the type of method is void, then the return statement can be excluded.

6. What are the three parts of a for statement and which of them are required?
1. Key word For.
2. initialization (usually of a loop control variable), continuation test on whether to do another iteration, and an update step.
3. A loop body
All of them are required.
