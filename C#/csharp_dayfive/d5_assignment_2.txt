
Name: E MA
Email: eabbyma@gmail.com

02 Arrays and Strings ----------------------------------

Test your Knowledge
1. When to use String vs. StringBuilder in C# ?
String is immuutable and StringBuilder is mutable. 
If a string is going to remain constant throughout the program, then use String class object because a String object is immutable.
If a string can change (example: lots of logic and operations in the construction of the string) then using a StringBuilder is the best option.

2. What is the base class for all arrays in C#?
The Array class is the base class for all the arrays in c#. 

3. How do you sort an array in C#?
To sort an array, we can use Array.Sort() method which sort the array ascending order.

4. What property of an array object can be used to get the total number of elements in
an array?
To count the number of elements in c#, we can use count() method from the IEnumerable.

5. Can you store multiple data types in System.Array?
No, we can't store multiple datatype in an Array.

6. What’s the difference between the System.Array.CopyTo() and System.Array.Clone()?
Clone() method makes a clone of the original array. It returns an exact length array. 
On the other hand, CopyTo() copies the elements from the original array to the destination array starting at the specified destination array index.

Practice Arrays ----------------------------------
1. Copying an Array
Write code to create a copy of an array. First, start by creating an initial array. (You can use
whatever type of data you want.) Let’s start with 10 items. Declare an array variable and
assign it a new array with 10 items in it. Use the things we’ve discussed to put some values
in the array.
Now create a second array variable. Give it a new array with the same length as the first.
Instead of using a number for this length, use the Lengthproperty to get the size of the
original array.
Use a loop to read values from the original array and place them in the new array. Also
print out the contents of both arrays, to be sure everything copied correctly.

    static void CopyArray()
    {
        // Create initalize array with 10 elements
        int[] array1 = new int[10];
        // Delare a variable 
        int[] array2 = new int[] { 1, 3, 5, 7, 9, 20, 2, 6, 6, 8 };
        // Create a new array varable
        int[] array3 = new int[10];
        // Give it length using lenght property
        // Use loop to read values from original array and palce in the new array

        for (int i = 0; i < array1.Length; i++)
        {
            int original_value = array2[i];
            // Print out the contents for both array
            Console.WriteLine("Content: " + original_value);
            array3[i] = original_value;
        }
    }

2. Write a simple program that lets the user manage a list of elements. It can be a grocery list,
"to do" list, etc. Refer to Looping Based on a Logical Expression if necessary to see how to
implement an infinite loop. Each time through the loop, ask the user to perform an
operation, and then show the current contents of their list. The operations available should
be Add, Remove, and Clear. The syntax should be as follows:
+ some item
- some item
--
Your program should read in the user's input and determine if it begins with a “+” or “-“ or
if it is simply “—“ . In the first two cases, your program should add or remove the string
given ("some item" in the example). If the user enters just “—“ then the program should
clear the current list. Your program can start each iteration through its loop with the
following instruction:
Console.WriteLine("Enter command (+ item, - item, or -- to clear)):");

  static void ManageList()
    {
        List<string> list = new List<string>();
        Console.Write("Enter command (+ item, - item or -- to clear): ");
        string operation = Console.ReadLine(); while (operation != null)
        {
            switch (operation)
            {
                case "+":
                    Console.Write("Please enter the element: ");
                    list.Add(Console.ReadLine());
                    Console.WriteLine($"The current list is: ");
                    foreach (var item in list)
                    {
                        Console.Write(item + "\t");
                    }
                    Console.WriteLine();
                    break;
                case "-":
                    list.RemoveAt(list.Count - 1);
                    Console.WriteLine($"The current list is: {list}");
                    Console.WriteLine($"The current list is: ");
                    foreach (var item in list)
                    {
                        Console.Write(item + "\t");
                    }
                    Console.WriteLine(); break;
                case "--":
                    list.Clear();
                    Console.WriteLine("You have removed all the elements");
                    break;
                default:
                    Console.WriteLine("Invalid operation");
                    break;
            }
            Console.WriteLine("Insert another input to Continue: ");
            operation = Console.ReadLine();
        }
    }



3. Write a method that calculates all prime numbers in given range and returns them as array
of integers
    static int[] FindPrimesInRange(int startNum, int endNum)
    {
        List<int> result = new List<int>();
        for (int i = startNum; i < endNum; i++)
        {
            for (int j = 2; j < endNum; j++)
            {
                if (i % j == 0)
                {
                    break;
                }
            }
            result.Add(i);
        }
        Console.WriteLine("Result", result);
    }

4. Write a program to read an array of n integers (space separated on a single line) and an
integer k, rotate the array right k times and sum the obtained arrays after each rotation as
shown below.
    public int[] RotateSum(int[] arr, int k)
    {
        int[] result = { };
        for (int i = 0; i < Array.MaxLength; i++)
        {
            if (i+k < Array.Length) {
             result.Add(arr[i] + arr[i+k]);
            }
            result.Add(arr[i] + arr[k-i]);

        }
        Console.WriteLine("Result", result);
    }


5. Write a program that finds the longest sequence of equal elements in an array of integers.
If several longest sequences exist, print the leftmost one.
Input Output
    public int[] LongestSeq(int[] arr)
    {
        int count = 1;
        int longestNum = numbers[0];
        int longestCount = 1;

        for (int i = 1; i < numbers.Length; i++)
        {
            if (numbers[i] != numbers[i - 1])
            {
                count = 0;
            }
            count++;
            if (count > longestCount)
            {
                longestCount = count;
                longestNum = numbers[i];
            }
        }
        Console.WriteLine(string.Join(" ", Enumerable.Repeat(longestNum, longestCount)));
        int[] result = new int[longestCount];
        Array.Fill(result, longestNum);
    }

7. Write a program that finds the most frequent number in a given sequence of numbers. In
case of multiple numbers with the same maximal frequency, print the leftmost of them
Input Output
    pulic findMostFrequentElement(int[] Arr)
    {
        int max_freq = 0;
        int ans = -1;
        int n = Arr.Length;
        for (int i = 0; i < n; i++)
        {
            int curr_freq = 1;
            for (j = i + 1; j < n; j++)
                if (Arr[j] == Arr[i])
                    curr_freq = curr_freq + 1;

            if (max_freq < curr_freq)
            {
                max_freq = curr_freq;
                ans = Arr[i];
            }
            else if (max_freq == curr_freq)
                ans = min(ans, Arr[i]);
        }
        Console.WriteLine(ans);
    }

Practice Strings ----------------------------------
1. Write a program that reads a string from the console, reverses its letters and prints the
result back at the console.
Write in two ways
Convert the string to char array, reverse it, then convert it to string again
Print the letters of the string in back direction (from the last to the first) in a for-loop
Input Output
sample elpmas
24tvcoi92 29iocvt42

public string ReverseStringOne(string s) 
{ if (s == null) { 
        return string.Empty; }char[] chars = s.ToCharArray();
    for (int i = 0, j = chars.Length - 1; i < j; i++, j--)
    { 
        char c = chars[i]; chars[i] = chars[j]; chars[j] = c; 
    }
    string res = new string(chars); return res;
}

2. Write a program that reverses the words in a given sentence without changing the
punctuation and spaces
Use the following separators between the words: . , : ; = ( ) & [ ] " ' \ / ! ? (space).
All other characters are considered part of words, e.g. C++, a+b, and a77 are
considered valid words.
The sentences always start by word and end by separator.
C# is not C++, and PHP is not Delphi!
Delphi not is PHP, and C++ not is C#!
The quick brown fox jumps over the lazy dog /Yes! Really!!!/.
Really Yes dog lazy the over jumps fox brown /quick! The!!!/.
    public static string ReverseWords(string str)
    {
        return String.Join(" ", str.Split('.', ' ').Reverse()).ToString();
    }

3. Write a program that extracts from a given text all palindromes, e.g. “ABBA”, “lamal”, “exe”
and prints them on the console on a single line, separated by comma and space.Print all
unique palindromes (no duplicates), sorted
Hi,exe? ABBA! Hog fully a string: ExE. Bob
a, ABBA, exe, ExE
    static static string FindPalindromes(string str)
    {
        string[] words = str.Split(',', ' ');
        foreach (string w in words)
        {
            if (w == w.Reverse())
            {
                Console.WriteLine(words);
            }
        }
    }

4. Write a program that parses an URL given in the following format:
[protocol]://[server]/[resource]
The parsing extracts its parts: protocol, server and resource.
The [server] part is mandatory.
The [protocol] and [resource] parts are optional.
https://www.apple.com/iphone
[protocol] = "https"
[server] = "www.apple.com"
[resource] = "iphone"
ftp://www.example.com/employee
[protocol] = "ftp"
[server] = "www.example.com"
[resource] = "employee"
https://google.com
[protocol] = "https"
[server] = "google.com"
[resource] = ""
www.apple.com
[protocol] = ""
[server] = "www.apple.com"
[resource] = ""

    public void ParseUrl(string url)
    {
        char[] seperator = new char[] { ':', '/', '/' };
        int i = url.IndexOfAny(seperator);
        string protocal, secondHalf;
        if (i != -1)
        {
            protocal = url.Substring(0, i);
            secondHalf = url.Substring(i + 3);
        }
        else { protocal = " "; secondHalf = url; }
        string[] temp = secondHalf.Split('/');
        string server = temp[0];
        string resource;
        if (temp.Length > 1) { resource = temp[1]; }
        else { resource = " "; }
        Console.WriteLine($"[protocal] = {protocal}");
        Console.WriteLine($"[server] = {server}");
        Console.WriteLine($"[resource] = {resource}");
    }